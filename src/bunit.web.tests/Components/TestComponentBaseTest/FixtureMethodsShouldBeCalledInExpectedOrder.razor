@inherits TestComponentBase

<Fixture Setup="Setup"
		 SetupAsync="SetupAsync"
		 Test="Test1"
		 TestAsync="TestAsync1"
		 Tests=@(new Action<Fixture>[] { Test2, Test3 })
		 TestsAsync=@(new Func<Fixture,Task>[] { TestAsync2, TestAsync3 })>
	<ComponentUnderTest><div /></ComponentUnderTest>
</Fixture>
@code{
	List<string> callOrder = new List<string>();

	void Setup(Fixture fixture)
	{
		callOrder.Add(nameof(Setup));
		VerifyCallOrder(1);
	}

	Task SetupAsync(Fixture fixture)
	{
		callOrder.Add(nameof(SetupAsync));
		VerifyCallOrder(2);
		return Task.CompletedTask;
	}

	void Test1(Fixture fixture)
	{
		callOrder.Add(nameof(Test1));
		VerifyCallOrder(3);
	}

	Task TestAsync1(Fixture fixture)
	{
		callOrder.Add(nameof(TestAsync1));
		VerifyCallOrder(4);
		return Task.CompletedTask;
	}

	void Test2(Fixture fixture)
	{
		callOrder.Add(nameof(Test2));
		VerifyCallOrder(5);
	}

	void Test3(Fixture fixture)
	{
		callOrder.Add(nameof(Test3));
		VerifyCallOrder(6);
	}

	Task TestAsync2(Fixture fixture)
	{
		callOrder.Add(nameof(TestAsync2));
		VerifyCallOrder(7);
		return Task.CompletedTask;
	}

	Task TestAsync3(Fixture fixture)
	{
		callOrder.Add(nameof(TestAsync3));
		VerifyCallOrder(8);
		return Task.CompletedTask;
	}

	void VerifyCallOrder(int uptil)
	{
		callOrder.Count.ShouldBe(uptil);

		callOrder[0].ShouldBe(nameof(Setup));

		if(uptil == 2)
			callOrder[1].ShouldBe(nameof(SetupAsync));

		if (uptil == 3)
			callOrder[2].ShouldBe(nameof(Test1));

		if (uptil == 4)
			callOrder[3].ShouldBe(nameof(TestAsync1));

		if (uptil == 5)
			callOrder[4].ShouldBe(nameof(Test2));

		if (uptil == 6)
			callOrder[5].ShouldBe(nameof(Test3));

		if (uptil == 7)
			callOrder[6].ShouldBe(nameof(TestAsync2));

		if (uptil == 8)
			callOrder[7].ShouldBe(nameof(TestAsync3));
	}
}
