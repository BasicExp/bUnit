@inherits TestComponentBase
@using Microsoft.JSInterop
@using AngleSharp.Html.Dom
@using AngleSharp.Diffing.Core
@using Shouldly
@using Microsoft.Extensions.DependencyInjection
@using Mocks

<Fixture Setup="Setup" Tests=@(new Test[] { ListStartsOutAsEmpty, AddingTaskToListWorksAlternative })>
    <ComponentUnderTest>
        <TodoList Label=@labelText>
            <ItemsTemplate>
                <TodoItem Todo=@context />
            </ItemsTemplate>
        </TodoList>
    </ComponentUnderTest>
    <Fragment Id="InitiallyExpected">
        <div class="input-group mb-3 p-3">
            <input value="" type="text" class="form-control" placeholder=@labelText aria-label=@labelText />
            <div class="input-group-append">
                <button class="btn btn-secondary" type="button">Add task</button>
            </div>
        </div>
        <ol class="list-group"></ol>
    </Fragment>
    <Fragment Id="AddedTodoItem">
        <TodoItem Todo=@(new Todo { Text = newTodoText })></TodoItem>
    </Fragment>
</Fixture>
@code {
    private string labelText = "Enter your task here";
    private string newTodoText = "Say Hello World Blazor!";

    void Setup(TestContext context)
    {
        context.AddService<IJSRuntime>(new JsRuntimeMock());
    }

    void ListStartsOutAsEmpty(TestContext context)
    {
        // arrange/act
        var cut = context.GetComponentUnderTest<TodoList>();
        var expected = context.GetFragment("InitiallyExpected");

        // assert
        cut.ShouldBe(expected);
    }

    void AddingTaskToListWorks(TestContext context)
    {
        // arrange
        var cut = context.GetComponentUnderTest<TodoList>();
        var initialExpected = context.GetFragment("InitiallyExpected");
        var expectedItem = context.AddComponent<TodoItem>((nameof(TodoItem.Todo), new Todo { Text = newTodoText }));

        // act
        cut.Find("input").Change(newTodoText);
        cut.Find("button").Click();

        // assert
        var diffs = cut.CompareTo(initialExpected);
        diffs.Count.ShouldBe(1);
        diffs.First().ShouldBeAddition(expectedItem);
    }

    void AddingTaskToListWorksAlternative(TestContext context)
    {
        // arrange
        var cut = context.GetComponentUnderTest<TodoList>();
        var initialExpected = context.GetFragment("InitiallyExpected");
        var expectedItem = context.GetFragment<TodoItem>("AddedTodoItem");

        // act
        cut.Find("input").Change(newTodoText);
        cut.Find("button").Click();

        // assert
        var diffs = cut.CompareTo(initialExpected);
        diffs.Count.ShouldBe(1);
        diffs.First().ShouldBeAddition(expectedItem);
    }
}