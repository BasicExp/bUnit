@inherits TestComponentBase
@using Xunit

<Fixture Test="CallingGetMultipleTimesReturnsSameInstance">
    <ComponentUnderTest>
        <Wrapper>CUT</Wrapper>
    </ComponentUnderTest>
    <Fragment Id="first">first</Fragment>
    <Fragment Id="second">
        <Wrapper>second</Wrapper>
    </Fragment>
</Fixture>
@code{
    void CallingGetMultipleTimesReturnsSameInstance(IRazorTestContext context)
    {
        var cut1 = context.GetComponentUnderTest<Wrapper>();
        var cut2 = context.GetComponentUnderTest<Wrapper>();

        Assert.True(ReferenceEquals(cut1, cut2), "Getting CUT multiple times should return the same instance");
        Assert.Equal("CUT", cut1.GetMarkup());

        var firstFragmentNoId1 = context.GetFragment();
        var firstFragmentId1 = context.GetFragment("first");
        var firstFragmentNoId2 = context.GetFragment();
        var firstFragmentId2 = context.GetFragment("first");
        Assert.True(ReferenceEquals(firstFragmentNoId1, firstFragmentId1), "Getting first fragment with and without id should return the same instance");
        Assert.True(ReferenceEquals(firstFragmentNoId1, firstFragmentNoId2), "Getting first fragment multiple times should return the same instance");
        Assert.True(ReferenceEquals(firstFragmentId1, firstFragmentId2), "Getting first fragment multiple times should return the same instance");
        Assert.Equal("first", firstFragmentNoId1.GetMarkup());

        var secondFragmentId1 = context.GetFragment<Wrapper>("second");
        var secondFragmentId2 = context.GetFragment<Wrapper>("second");

        Assert.True(ReferenceEquals(secondFragmentId1, secondFragmentId2), "Getting fragment multiple times should return the same instance");
        Assert.Equal("second", secondFragmentId2.GetMarkup());
    }
}

<Fixture Test="CallingGenericGetAfterNonGenericGetThrows">
    <ComponentUnderTest>
        <Wrapper>CUT</Wrapper>
    </ComponentUnderTest>
    <Fragment>
        <Wrapper>second</Wrapper>
    </Fragment>
</Fixture>
@code{
    void CallingGenericGetAfterNonGenericGetThrows(IRazorTestContext context)
    {
        context.GetComponentUnderTest();

        // It should not be possible to call the generic GetComponentUnderTest after the non-generic has been called
        Assert.Throws<InvalidOperationException>(() => context.GetComponentUnderTest<Wrapper>());

        context.GetFragment();

        // It should not be possible to call the generic GetFragment after the non-generic has been called
        Assert.Throws<InvalidOperationException>(() => context.GetFragment<Wrapper>());
    }
}

<Fixture Test="CallingGetCutOrGetFragmentWithWrongGenericTypeThrows">
    <ComponentUnderTest>
        <Wrapper></Wrapper>
    </ComponentUnderTest>
    <Fragment>
        <Wrapper></Wrapper>
    </Fragment>
</Fixture>
@code{
    void CallingGetCutOrGetFragmentWithWrongGenericTypeThrows(IRazorTestContext context)
    {        
        Assert.Throws<InvalidOperationException>(() => context.GetComponentUnderTest<Simple1>());
        Assert.Throws<InvalidOperationException>(() => context.GetFragment<Simple1>());
    }
}

<Fixture Test="CallingGetCutOrGetFragmentWithIncompatibleGenericTypeThrows">
    <ComponentUnderTest>
        <Wrapper></Wrapper>
    </ComponentUnderTest>
    <Fragment>
        <Wrapper></Wrapper>
    </Fragment>
</Fixture>
@code{
    void CallingGetCutOrGetFragmentWithIncompatibleGenericTypeThrows(IRazorTestContext context)
    {
        context.GetComponentUnderTest<Wrapper>();
        context.GetFragment<Wrapper>();
        Assert.Throws<InvalidOperationException>(() => context.GetComponentUnderTest<Simple1>());
        Assert.Throws<InvalidOperationException>(() => context.GetFragment<Simple1>());
    }
}